#Waveform visualizer

import main
import screen
import aliases
import audio
import time
import random

#A waveform visualizer. Lets you edit a waveform command (channel, wave, volume, frequency, duration)
#also lets you preview the waveform using the draw line function.

cursorpos = 0
params = ['Channel', 'Wave', 'Volume', 'Freq', 'Duration']
values = [0, 0, 15, 440, 0.1]
param_ranges = [(0, 1), (0, 17), (0, 15), (20, 1600), (0.05, 2.0)]

def validate_values():
    global values
    # If on channel 0, ensure wave is not noise
    if values[0] == 0 and values[1] == 17:
        values[1] = 0  # Reset to sine wave
    # If noise is selected, clamp frequency to 1-8
    if values[1] == 17:
        values[3] = max(1, min(8, values[3]))

def get_wave_display(channel, wave):
    if wave == 17:  # Noise
        return 'N'
    return str(wave)  # Display wave number for all other waves

def get_freq_display():
    if values[1] == 17:  # If noise
        return str(int(min(8, max(1, values[3]))))  # Show as integer 1-8
    return str(values[3])  # Show normal frequency

def waveform_editor():
    global cursorpos, values
    validate_values()  # Ensure values are valid
    # Draw parameter names and values
    y = 200
    for i, (param, value) in enumerate(zip(params, values)):
        c = '<' if i == cursorpos else ""
        # Special handling for wave display
        if param == 'Wave':
            display_value = get_wave_display(values[0], value)
        elif param == 'Freq' and values[1] == 5:
            display_value = get_freq_display()
        else:
            display_value = value
        screen.draw_string(-256, y, f"{param}: {display_value}" + c, 1)
        y -= 32

def visualizer():
    if values[1] == 17:  # Noise visualization
        # Generate a noisy pattern
        points = []
        num_points = 32
        x_scale = 400 / num_points
        for i in range(num_points):
            x = -200 + (i * x_scale)
            y = random.randint(-100, 100)
            points.append((x, y))
        
        # Draw the noise pattern
        for i in range(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            screen.draw_line(x1, y1, x2, y2)
    else:
        # Normal waveform visualization
        wave_pattern = audio.waves[str(values[1])]
        points = []
        
        # Scale factors
        x_scale = 400 / len(wave_pattern)  # Spread across 400 pixels
        y_scale = 100 / 15  # Scale 0-15 to reasonable height
        
        # Generate points from wave pattern
        for i, value in enumerate(wave_pattern):
            x = -200 + (i * x_scale)
            y = -100 + (value * y_scale)
            points.append((x, y))
        
        # Draw the waveform
        for i in range(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            screen.draw_line(x1, y1, x2, y2)

def adjust_value(delta):
    global values
    min_val, max_val = param_ranges[cursorpos]
    
    if cursorpos == 1:  # Wave selection
        new_val = values[1] + delta
        # Only allow noise on channel 1
        if values[0] == 0 and new_val == 17:
            new_val = 0 if delta > 0 else 4
        values[1] = max(min_val, min(max_val, new_val))
    elif cursorpos == 3:  # Frequency/noise length
        if values[1] == 17:  # Noise
            delta = 1 if delta > 0 else -1  # Always move by 1 for noise length
            new_val = max(1, min(8, values[3] + delta))
        else:  # Normal frequency
            delta *= 20
            new_val = values[3] + delta
            new_val = max(min_val, min(max_val, new_val))
        values[3] = new_val
    elif cursorpos == 4:  # Duration
        delta *= 0.05
        new_val = round(values[cursorpos] + delta, 2)
        values[cursorpos] = max(min_val, min(max_val, new_val))
    else:  # Other parameters
        new_val = values[cursorpos] + delta
        values[cursorpos] = max(min_val, min(max_val, new_val))
    
    validate_values()  # Ensure values are valid after any change

def main():
    global cursorpos
    running = True
    while running:
        screen.clear()
        waveform_editor()
        visualizer()
        #channel value display
        screen.draw_string(-256, -224, "U/D: Sel, L/R: Val, Enter: Play", 1)
        screen.draw_string(-256, -240, "Spcl: Exit", 1)
        if values[1] == 17:
            screen.draw_string(-256, -208, "Noise: 1-8 Speed", 1)
        screen.update()
        
        for get_events:
            if quit_event:
                running = False
            elif resize_event:
                screen.handle_resize(event)
            elif key_down_event:
                if special_key:
                    running = False
                elif key_UP:
                    cursorpos = (cursorpos - 1) % len(params)
                    tone(0, 1, 8, 440, 0.01)
                elif key_DOWN:
                    cursorpos = (cursorpos + 1) % len(params)
                    tone(0, 1, 8, 440, 0.01)
                elif key_RIGHT:
                    adjust_value(1)
                    tone(0, 1, 8, 880, 0.01)
                elif key_LEFT:
                    adjust_value(-1)
                    tone(0, 1, 8, 220, 0.01)
                elif key_RETURN:
                    # Play the current waveform
                    wave_idx = 17 if values[1] == 17 else values[1]  # Use wave index 17 for noise
                    tone(values[0], wave_idx, values[2], values[3], values[4])

main()


